"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var numberMeasure_1 = require("../measure/numberMeasure");
var Base = require("./base");
exports.Dimensionless = numberMeasure_1.Measure.dimensionless(1);
exports.Length = Base.meters;
exports.Mass = Base.kilograms;
exports.Time = Base.seconds;
exports.ElectricCurrent = Base.amperes;
exports.Temperature = Base.kelvin;
exports.AmountOfSubstance = Base.moles;
exports.LuminousIntensity = Base.candelas;
exports.Memory = Base.bits;
exports.PlaneAngle = Base.radians;
exports.SolidAngle = Base.steradians;
exports.Frequency = exports.Time.inverse();
exports.FrequencyDrift = exports.Time.toThe("-2");
exports.FuelEfficiency = exports.Length.toThe("-2");
exports.Wavenumber = exports.Length.inverse();
exports.Area = exports.Length.squared();
exports.Volume = exports.Length.cubed();
exports.Absement = exports.Length.times(exports.Time);
exports.Velocity = exports.Length.over(exports.Time);
exports.Acceleration = exports.Velocity.over(exports.Time);
exports.Jerk = exports.Acceleration.over(exports.Time);
exports.Jounce = exports.Jerk.over(exports.Time);
exports.Crackle = exports.Jounce.over(exports.Time);
exports.VolumetricFlow = exports.Volume.over(exports.Time);
exports.MassFlowRate = exports.Mass.over(exports.Time);
exports.LinearDensity = exports.Mass.over(exports.Length);
exports.AreaDensity = exports.Mass.over(exports.Area);
exports.VolumeDensity = exports.Mass.over(exports.Volume);
exports.Force = exports.Mass.times(exports.Acceleration);
exports.Yank = exports.Force.over(exports.Time);
exports.Pressure = exports.Force.over(exports.Area);
exports.Compressibility = exports.Pressure.inverse();
exports.DynamicViscosity = exports.Pressure.times(exports.Time);
exports.SurfaceTension = exports.Force.over(exports.Length);
exports.Momentum = exports.Force.times(exports.Time);
exports.MomentOfInertia = exports.Mass.times(exports.Area);
exports.Energy = exports.Force.times(exports.Length);
exports.Power = exports.Energy.over(exports.Time);
exports.PowerDensity = exports.Power.over(exports.Volume);
exports.Voltage = exports.Power.over(exports.ElectricCurrent);
exports.ElectricCharge = exports.ElectricCurrent.times(exports.Time);
exports.ElectricChargeDensity = exports.ElectricCharge.over(exports.Volume);
exports.ElectricCurrentDensity = exports.ElectricCurrent.over(exports.Area);
exports.ElectricDisplacement = exports.ElectricCharge.over(exports.Area);
exports.EletricFieldStrength = exports.Voltage.over(exports.Length);
exports.ElectricalCapacitance = exports.ElectricCharge.over(exports.Voltage);
exports.ElectricalConductance = exports.ElectricCurrent.over(exports.Voltage);
exports.ElectricalConductivity = exports.ElectricalConductance.over(exports.Length);
exports.ElectricalResistance = exports.Voltage.over(exports.ElectricCurrent);
exports.ElectricalResistivity = exports.ElectricalResistance.times(exports.Length);
exports.ElectricalInductance = exports.ElectricalResistance.times(exports.Time);
exports.LinearChargeDensity = exports.ElectricCharge.over(exports.Length);
exports.Permittivity = exports.ElectricalCapacitance.over(exports.Length);
exports.MagneticFlux = exports.Energy.over(exports.ElectricCurrent);
exports.MagneticFluxDensity = exports.Voltage.times(exports.Time).over(exports.Area);
exports.MagneticPermeability = exports.ElectricalInductance.over(exports.Length);
exports.Magnetization = exports.ElectricCurrent.over(exports.Length);
exports.MagneticReluctance = exports.ElectricalInductance.inverse();
exports.MagneticMoment = exports.MagneticFlux.times(exports.Length);
exports.MagneticRigidity = exports.MagneticFluxDensity.times(exports.Length);
exports.MagneticDipoleMoment = exports.Energy.over(exports.MagneticFluxDensity);
exports.MagneticSusceptibility = exports.Length.over(exports.ElectricalInductance);
exports.Irradiance = exports.Power.over(exports.Area);
exports.Entropy = exports.Energy.over(exports.Temperature);
exports.SpecificHeat = exports.Energy.over(exports.Mass.times(exports.Temperature));
exports.SpecificVolume = exports.Volume.over(exports.Mass);
exports.ThermalConductivity = exports.Power.over(exports.Length.times(exports.Temperature));
exports.ThermalResistance = exports.Temperature.over(exports.Power);
exports.ThermalExpansionCoefficient = exports.Temperature.inverse();
exports.ThermalGradient = exports.Temperature.over(exports.Length);
exports.MolarEntropy = exports.Entropy.over(exports.AmountOfSubstance);
exports.MolarEnergy = exports.Energy.over(exports.AmountOfSubstance);
exports.Molarity = exports.AmountOfSubstance.over(exports.Volume);
exports.MolarVolume = exports.Volume.over(exports.AmountOfSubstance);
exports.Molality = exports.AmountOfSubstance.over(exports.Mass);
exports.MolarMass = exports.Mass.over(exports.AmountOfSubstance);
exports.MolarConductivity = exports.ElectricalConductance.times(exports.Area).over(exports.AmountOfSubstance);
exports.CatalyticActivity = exports.AmountOfSubstance.over(exports.Time);
exports.CatalyticEfficiency = exports.Volume.over(exports.AmountOfSubstance.times(exports.Time));
exports.ReactionRate = exports.CatalyticActivity.over(exports.Volume);
exports.RadiationDose = exports.Energy.over(exports.Mass);
exports.RadiationDoseRate = exports.RadiationDose.over(exports.Time);
exports.ElectronMobility = exports.Area.over(exports.Voltage.times(exports.Time));
exports.AngularMomentum = exports.Force.times(exports.Length).times(exports.Time);
exports.SpecificAngularMomentum = exports.AngularMomentum.over(exports.Mass);
exports.Luminance = exports.LuminousIntensity.over(exports.Area);
exports.LuminousFlux = exports.LuminousIntensity.times(exports.SolidAngle);
exports.Illuminance = exports.LuminousFlux.over(exports.Area);
exports.LuminousEnergy = exports.LuminousFlux.times(exports.Time);
exports.LuminousExposure = exports.Illuminance.times(exports.Time);
exports.LuminousEfficiency = exports.LuminousFlux.over(exports.Power);
exports.RadiantIntensity = exports.Power.over(exports.SolidAngle);
exports.SpectralIntensity = exports.RadiantIntensity.over(exports.Length);
exports.Radiance = exports.RadiantIntensity.over(exports.Area);
exports.SpectralRadiance = exports.RadiantIntensity.over(exports.Volume);
exports.AngularVelocity = exports.PlaneAngle.over(exports.Time);
exports.AngularAcceleration = exports.AngularVelocity.over(exports.Time);
//# sourceMappingURL=quantities.js.map