import { AddendOf, AddExponents, DivideExponents, Exponent, MultiplicandOf, MultiplyExponents, NonZeroExponent, ProductOf, SubtractExponents, SubtrahendOf } from "../exponent";
export declare type Unit = {
    [dimension: string]: Exponent | undefined;
};
export declare type UnitWithSymbols<U extends Unit = Unit> = {
    [D in keyof U]+?: [string, NonNullable<U[D]>];
};
export declare type SymbolAndExponent = [string, Exponent];
/** Returns the product of two units. This is the sum of two dimension vectors. */
export declare type MultiplyUnits<L extends Unit, R extends Unit> = CleanUnit<{
    [Dim in keyof L | keyof R]: AddExponents<GetExponent<L, Dim>, GetExponent<R, Dim>>;
}>;
/** A type that is assignable from all units that can be multiplied by U without producing an error. */
export declare type MultiplicandUnit<U extends Unit> = Partial<{
    [D in keyof U]: AddendOf<CleanExponent<U[D]>>;
}> & Unit;
/** Returns the quotient of two units. This is the difference of two dimension vectors. */
export declare type DivideUnits<L extends Unit, R extends DivisorUnit<L>> = CleanUnit<{
    [Dim in keyof L | keyof R]: SubtractExponents<GetExponent<L, Dim>, GetExponent<R, Dim>>;
}>;
/** A type that is assignable from all units that U can be divided by without producing an error. */
export declare type DivisorUnit<U extends Unit> = Partial<{
    [D in keyof U]: SubtrahendOf<CleanExponent<U[D]>>;
}> & Unit;
/** Returns the unit raised to a power. This is the scalar multiple of the dimension vector. */
export declare type ExponentiateUnit<U extends Unit, N extends Exponent> = "0" extends N ? {} : {
    [Dim in keyof U]: MultiplyExponents<GetExponent<U, Dim>, N>;
};
/** Returns the union of exponents to which a given unit is allowed to be raised.  */
export declare type AllowedExponents<U extends Unit> = Exclude<Exponent, NonAllowedExponents<U>> | "-1" | "0" | "1";
/** Returns the union of exponents that raising and exponent to would produce an error. */
declare type NonAllowedExponents<U extends Unit> = {
    [Dim in keyof U]: undefined extends U[Dim] ? never : Exclude<Exponent, MultiplicandOf<NonNullable<U[Dim]>>>;
}[keyof U];
/** Returns the nth root of a unit. This is the inverse scalar multiple of the dimension vector. */
export declare type NthRootUnit<U extends RadicandUnit<N>, N extends NonZeroExponent> = 1 extends N ? U : {
    [Dim in keyof U]: DivideExponents<GetExponent<U, Dim>, N>;
};
/** A type that is assignable from all units whose Nth root does not produce an error. */
export declare type RadicandUnit<N extends Exponent> = {
    [dimension: string]: ProductOf<N> | undefined;
};
/** Makes a unit pretty in intellisense views.  */
declare type CleanUnit<U extends Unit> = ExponentiateUnit<StripZeroes<U>, "1">;
/** Removes all zero exponent dimensions from a dimension vector */
declare type StripZeroes<U extends Unit> = {
    [Dim in NonZeroKeys<U>]: U[Dim];
};
/** Gets the union of all dimensions of a unit with non zero or null exponents */
declare type NonZeroKeys<U extends Unit> = {
    [Dim in keyof U]: NonNullable<U[Dim]> extends "0" ? never : Dim;
}[keyof U];
/** Get the exponent at a given dimension of a unit, or 0 if that dimension is undefined */
declare type GetExponent<U extends Unit, D> = D extends keyof U ? NonNullable<U[D]> : "0";
declare type CleanExponent<E extends undefined | Exponent> = undefined extends E ? "0" : NonNullable<E>;
export {};
