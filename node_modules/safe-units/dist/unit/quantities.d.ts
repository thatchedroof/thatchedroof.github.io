import { GenericMeasure, LiftMeasure } from "../measure/genericMeasure";
import * as Base from "./base";
/** A measure without any unit */
export declare type Dimensionless<N = number> = LiftMeasure<typeof Dimensionless, N>;
export declare const Dimensionless: GenericMeasure<number, {}>;
/** meters */
export declare type Length<N = number> = LiftMeasure<typeof Base.meters, N>;
export declare const Length: Length;
/** kilograms */
export declare type Mass<N = number> = LiftMeasure<typeof Base.kilograms, N>;
export declare const Mass: Mass;
/** seconds */
export declare type Time<N = number> = LiftMeasure<typeof Base.seconds, N>;
export declare const Time: Time;
/** Amperes */
export declare type ElectricCurrent<N = number> = LiftMeasure<typeof Base.amperes, N>;
export declare const ElectricCurrent: ElectricCurrent;
/** Kelvin */
export declare type Temperature<N = number> = LiftMeasure<typeof Base.kelvin, N>;
export declare const Temperature: Temperature;
/** moles */
export declare type AmountOfSubstance<N = number> = LiftMeasure<typeof Base.moles, N>;
export declare const AmountOfSubstance: AmountOfSubstance;
/** candelas */
export declare type LuminousIntensity<N = number> = LiftMeasure<typeof Base.candelas, N>;
export declare const LuminousIntensity: LuminousIntensity;
/** bits */
export declare type Memory<N = number> = LiftMeasure<typeof Base.bits, N>;
export declare const Memory: Memory;
/** radians */
export declare type PlaneAngle<N = number> = LiftMeasure<typeof Base.radians, N>;
export declare const PlaneAngle: PlaneAngle;
/** steradians */
export declare type SolidAngle<N = number> = LiftMeasure<typeof Base.steradians, N>;
export declare const SolidAngle: SolidAngle;
/** 1 / s */
export declare type Frequency<N = number> = LiftMeasure<typeof Frequency, N>;
export declare const Frequency: GenericMeasure<number, {
    time: "-1";
}>;
/** 1 / s² */
export declare type FrequencyDrift<N = number> = LiftMeasure<typeof FrequencyDrift, N>;
export declare const FrequencyDrift: GenericMeasure<number, {
    time: "-2";
}>;
/** 1 / m² */
export declare type FuelEfficiency<N = number> = LiftMeasure<typeof FuelEfficiency, N>;
export declare const FuelEfficiency: GenericMeasure<number, {
    length: "-2";
}>;
/** 1 / m */
export declare type Wavenumber<N = number> = LiftMeasure<typeof Wavenumber, N>;
export declare const Wavenumber: GenericMeasure<number, {
    length: "-1";
}>;
/** m² */
export declare type Area<N = number> = LiftMeasure<typeof Area, N>;
export declare const Area: GenericMeasure<number, {
    length: "2";
}>;
/** m³ */
export declare type Volume<N = number> = LiftMeasure<typeof Volume, N>;
export declare const Volume: GenericMeasure<number, {
    length: "3";
}>;
/** m ⋅ s */
export declare type Absement<N = number> = LiftMeasure<typeof Absement, N>;
export declare const Absement: GenericMeasure<number, {
    length: "1";
    time: "1";
}>;
/** m / s */
export declare type Velocity<N = number> = LiftMeasure<typeof Velocity, N>;
export declare const Velocity: GenericMeasure<number, {
    length: "1";
    time: "-1";
}>;
/** m / s² */
export declare type Acceleration<N = number> = LiftMeasure<typeof Acceleration, N>;
export declare const Acceleration: GenericMeasure<number, {
    length: "1";
    time: "-2";
}>;
/** m / s³ */
export declare type Jerk<N = number> = LiftMeasure<typeof Jerk, N>;
export declare const Jerk: GenericMeasure<number, {
    length: "1";
    time: "-3";
}>;
/** m / s⁴ */
export declare type Jounce<N = number> = LiftMeasure<typeof Jounce, N>;
export declare const Jounce: GenericMeasure<number, {
    length: "1";
    time: "-4";
}>;
/** m / s⁵ */
export declare type Crackle<N = number> = LiftMeasure<typeof Crackle, N>;
export declare const Crackle: GenericMeasure<number, {
    length: "1";
    time: "-5";
}>;
/** m³ / s */
export declare type VolumetricFlow<N = number> = LiftMeasure<typeof VolumetricFlow, N>;
export declare const VolumetricFlow: GenericMeasure<number, {
    length: "3";
    time: "-1";
}>;
/** kg / s */
export declare type MassFlowRate<N = number> = LiftMeasure<typeof MassFlowRate, N>;
export declare const MassFlowRate: GenericMeasure<number, {
    mass: "1";
    time: "-1";
}>;
/** kg / m */
export declare type LinearDensity<N = number> = LiftMeasure<typeof LinearDensity, N>;
export declare const LinearDensity: GenericMeasure<number, {
    length: "-1";
    mass: "1";
}>;
/** kg / m²  */
export declare type AreaDensity<N = number> = LiftMeasure<typeof AreaDensity, N>;
export declare const AreaDensity: GenericMeasure<number, {
    length: "-2";
    mass: "1";
}>;
/** kg / m³ */
export declare type VolumeDensity<N = number> = LiftMeasure<typeof VolumeDensity, N>;
export declare const VolumeDensity: GenericMeasure<number, {
    length: "-3";
    mass: "1";
}>;
/** kg ⋅ m / s² */
export declare type Force<N = number> = LiftMeasure<typeof Force, N>;
export declare const Force: GenericMeasure<number, {
    length: "1";
    mass: "1";
    time: "-2";
}>;
/** km ⋅ m / s³ */
export declare type Yank<N = number> = LiftMeasure<typeof Yank, N>;
export declare const Yank: GenericMeasure<number, {
    length: "1";
    mass: "1";
    time: "-3";
}>;
/** kg / (m ⋅ s²)  */
export declare type Pressure<N = number> = LiftMeasure<typeof Pressure, N>;
export declare const Pressure: GenericMeasure<number, {
    length: "-1";
    mass: "1";
    time: "-2";
}>;
/** m ⋅ s² / kg */
export declare type Compressibility<N = number> = LiftMeasure<typeof Compressibility, N>;
export declare const Compressibility: GenericMeasure<number, {
    length: "1";
    mass: "-1";
    time: "2";
}>;
/** kg / (m ⋅ s) */
export declare type DynamicViscosity<N = number> = LiftMeasure<typeof DynamicViscosity, N>;
export declare const DynamicViscosity: GenericMeasure<number, {
    length: "-1";
    mass: "1";
    time: "-1";
}>;
/** kg / s² */
export declare type SurfaceTension<N = number> = LiftMeasure<typeof SurfaceTension, N>;
export declare const SurfaceTension: GenericMeasure<number, {
    mass: "1";
    time: "-2";
}>;
/** kg ⋅ m / s  */
export declare type Momentum<N = number> = LiftMeasure<typeof Momentum, N>;
export declare const Momentum: GenericMeasure<number, {
    length: "1";
    mass: "1";
    time: "-1";
}>;
/** kg ⋅ m² */
export declare type MomentOfInertia<N = number> = LiftMeasure<typeof MomentOfInertia, N>;
export declare const MomentOfInertia: GenericMeasure<number, {
    length: "2";
    mass: "1";
}>;
/** kg ⋅ m² / s² */
export declare type Energy<N = number> = LiftMeasure<typeof Energy, N>;
export declare const Energy: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-2";
}>;
/** kg ⋅ m² / s³ */
export declare type Power<N = number> = LiftMeasure<typeof Power, N>;
export declare const Power: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-3";
}>;
/** kg / (m ⋅ s³) */
export declare type PowerDensity<N = number> = LiftMeasure<typeof PowerDensity, N>;
export declare const PowerDensity: GenericMeasure<number, {
    length: "-1";
    mass: "1";
    time: "-3";
}>;
/** kg ⋅ m² / (s³ ⋅ A) */
export declare type Voltage<N = number> = LiftMeasure<typeof Voltage, N>;
export declare const Voltage: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-3";
    current: "-1";
}>;
/** s ⋅ A */
export declare type ElectricCharge<N = number> = LiftMeasure<typeof ElectricCharge, N>;
export declare const ElectricCharge: GenericMeasure<number, {
    time: "1";
    current: "1";
}>;
/** s ⋅ A / m³ */
export declare type ElectricChargeDensity<N = number> = LiftMeasure<typeof ElectricChargeDensity, N>;
export declare const ElectricChargeDensity: GenericMeasure<number, {
    length: "-3";
    time: "1";
    current: "1";
}>;
/** A / m² */
export declare type ElectricCurrentDensity<N = number> = LiftMeasure<typeof ElectricCurrentDensity, N>;
export declare const ElectricCurrentDensity: GenericMeasure<number, {
    length: "-2";
    current: "1";
}>;
/** s ⋅ A / m² */
export declare type ElectricDisplacement<N = number> = LiftMeasure<typeof ElectricDisplacement, N>;
export declare const ElectricDisplacement: GenericMeasure<number, {
    length: "-2";
    time: "1";
    current: "1";
}>;
/** kg ⋅ m / (s³ ⋅ A) */
export declare type EletricFieldStrength<N = number> = LiftMeasure<typeof EletricFieldStrength, N>;
export declare const EletricFieldStrength: GenericMeasure<number, {
    length: "1";
    mass: "1";
    time: "-3";
    current: "-1";
}>;
/** s⁴ ⋅ A² / (kg ⋅ m²) */
export declare type ElectricalCapacitance<N = number> = LiftMeasure<typeof ElectricalCapacitance, N>;
export declare const ElectricalCapacitance: GenericMeasure<number, {
    length: "-2";
    mass: "-1";
    time: "4";
    current: "2";
}>;
/** s³ ⋅ A / (kg ⋅ m²) */
export declare type ElectricalConductance<N = number> = LiftMeasure<typeof ElectricalConductance, N>;
export declare const ElectricalConductance: GenericMeasure<number, {
    length: "-2";
    mass: "-1";
    time: "3";
    current: "2";
}>;
/** s³ ⋅ A² / (kg ⋅ m³) */
export declare type ElectricalConductivity<N = number> = LiftMeasure<typeof ElectricalConductivity, N>;
export declare const ElectricalConductivity: GenericMeasure<number, {
    length: "-3";
    mass: "-1";
    time: "3";
    current: "2";
}>;
/** kg ⋅ m² / (s³ ⋅ A²) */
export declare type ElectricalResistance<N = number> = LiftMeasure<typeof ElectricalResistance, N>;
export declare const ElectricalResistance: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-3";
    current: "-2";
}>;
/** kg ⋅ m³ / (s³ ⋅ A²) */
export declare type ElectricalResistivity<N = number> = LiftMeasure<typeof ElectricalResistivity, N>;
export declare const ElectricalResistivity: GenericMeasure<number, {
    length: "3";
    mass: "1";
    time: "-3";
    current: "-2";
}>;
/** kg ⋅ m² / (s² ⋅ A²) */
export declare type ElectricalInductance<N = number> = LiftMeasure<typeof ElectricalInductance, N>;
export declare const ElectricalInductance: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-2";
    current: "-2";
}>;
/** s ⋅ A / m */
export declare type LinearChargeDensity<N = number> = LiftMeasure<typeof LinearChargeDensity, N>;
export declare const LinearChargeDensity: GenericMeasure<number, {
    length: "-1";
    time: "1";
    current: "1";
}>;
/** s⁴ ⋅ A² / (kg ⋅ m³) */
export declare type Permittivity<N = number> = LiftMeasure<typeof Permittivity, N>;
export declare const Permittivity: GenericMeasure<number, {
    length: "-3";
    mass: "-1";
    time: "4";
    current: "2";
}>;
/** kg ⋅ m² / (s² ⋅ A) */
export declare type MagneticFlux<N = number> = LiftMeasure<typeof MagneticFlux, N>;
export declare const MagneticFlux: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-2";
    current: "-1";
}>;
/** kg / (s² ⋅ A) */
export declare type MagneticFluxDensity<N = number> = LiftMeasure<typeof MagneticFluxDensity, N>;
export declare const MagneticFluxDensity: GenericMeasure<number, {
    mass: "1";
    time: "-2";
    current: "-1";
}>;
/** kg ⋅ m / (s² ⋅ A²)  */
export declare type MagneticPermeability<N = number> = LiftMeasure<typeof MagneticPermeability, N>;
export declare const MagneticPermeability: GenericMeasure<number, {
    length: "1";
    mass: "1";
    time: "-2";
    current: "-2";
}>;
/** A / m */
export declare type Magnetization<N = number> = LiftMeasure<typeof Magnetization, N>;
export declare const Magnetization: GenericMeasure<number, {
    length: "-1";
    current: "1";
}>;
/** s² ⋅ A² / (kg ⋅ m²) */
export declare type MagneticReluctance<N = number> = LiftMeasure<typeof MagneticReluctance, N>;
export declare const MagneticReluctance: GenericMeasure<number, {
    length: "-2";
    mass: "-1";
    time: "2";
    current: "2";
}>;
/** kg ⋅ m³ / (s² ⋅ A) */
export declare type MagneticMoment<N = number> = LiftMeasure<typeof MagneticMoment, N>;
export declare const MagneticMoment: GenericMeasure<number, {
    length: "3";
    mass: "1";
    time: "-2";
    current: "-1";
}>;
/** kg ⋅ m / (s² ⋅ A) */
export declare type MagneticRigidity<N = number> = LiftMeasure<typeof MagneticRigidity, N>;
export declare const MagneticRigidity: GenericMeasure<number, {
    length: "1";
    mass: "1";
    time: "-2";
    current: "-1";
}>;
/** m² ⋅ A */
export declare type MagneticDipoleMoment<N = number> = LiftMeasure<typeof MagneticDipoleMoment, N>;
export declare const MagneticDipoleMoment: GenericMeasure<number, {
    length: "2";
    current: "1";
}>;
/** s² ⋅ A² / (kg ⋅ m) */
export declare type MagneticSusceptibility<N = number> = LiftMeasure<typeof MagneticSusceptibility, N>;
export declare const MagneticSusceptibility: GenericMeasure<number, {
    length: "-1";
    mass: "-1";
    time: "2";
    current: "2";
}>;
/** kg / s³  */
export declare type Irradiance<N = number> = LiftMeasure<typeof Irradiance, N>;
export declare const Irradiance: GenericMeasure<number, {
    mass: "1";
    time: "-3";
}>;
/** kg ⋅ m / (s² ⋅ K)  */
export declare type Entropy<N = number> = LiftMeasure<typeof Entropy, N>;
export declare const Entropy: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-2";
    temperature: "-1";
}>;
/** m² / (s² ⋅ K) */
export declare type SpecificHeat<N = number> = LiftMeasure<typeof SpecificHeat, N>;
export declare const SpecificHeat: GenericMeasure<number, {
    length: "2";
    time: "-2";
    temperature: "-1";
}>;
/** m³ / kg  */
export declare type SpecificVolume<N = number> = LiftMeasure<typeof SpecificVolume, N>;
export declare const SpecificVolume: GenericMeasure<number, {
    length: "3";
    mass: "-1";
}>;
/** kg ⋅ m / (s³ ⋅ K)  */
export declare type ThermalConductivity<N = number> = LiftMeasure<typeof ThermalConductivity, N>;
export declare const ThermalConductivity: GenericMeasure<number, {
    length: "1";
    mass: "1";
    time: "-3";
    temperature: "-1";
}>;
/** s³ ⋅ K / (kg ⋅ m²) */
export declare type ThermalResistance<N = number> = LiftMeasure<typeof ThermalResistance, N>;
export declare const ThermalResistance: GenericMeasure<number, {
    length: "-2";
    mass: "-1";
    time: "3";
    temperature: "1";
}>;
/** 1 / K */
export declare type ThermalExpansionCoefficient<N = number> = LiftMeasure<typeof ThermalExpansionCoefficient, N>;
export declare const ThermalExpansionCoefficient: GenericMeasure<number, {
    temperature: "-1";
}>;
/** K / m */
export declare type ThermalGradient<N = number> = LiftMeasure<typeof ThermalGradient, N>;
export declare const ThermalGradient: GenericMeasure<number, {
    length: "-1";
    temperature: "1";
}>;
/** kg ⋅ m² / (s² ⋅ K ⋅ mol) */
export declare type MolarEntropy<N = number> = LiftMeasure<typeof MolarEntropy, N>;
export declare const MolarEntropy: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-2";
    temperature: "-1";
    substance: "-1";
}>;
/** kg ⋅ m² / (s² ⋅ mol) */
export declare type MolarEnergy<N = number> = LiftMeasure<typeof MolarEnergy, N>;
export declare const MolarEnergy: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-2";
    substance: "-1";
}>;
/** mol / m³ */
export declare type Molarity<N = number> = LiftMeasure<typeof Molarity, N>;
export declare const Molarity: GenericMeasure<number, {
    length: "-3";
    substance: "1";
}>;
/** m³ / mol */
export declare type MolarVolume<N = number> = LiftMeasure<typeof MolarVolume, N>;
export declare const MolarVolume: GenericMeasure<number, {
    length: "3";
    substance: "-1";
}>;
/** mol / kg */
export declare type Molality<N = number> = LiftMeasure<typeof Molality, N>;
export declare const Molality: GenericMeasure<number, {
    mass: "-1";
    substance: "1";
}>;
/** kg / mol  */
export declare type MolarMass<N = number> = LiftMeasure<typeof MolarMass, N>;
export declare const MolarMass: GenericMeasure<number, {
    mass: "1";
    substance: "-1";
}>;
/** s³ ⋅ A² / (kg ⋅ mol) */
export declare type MolarConductivity<N = number> = LiftMeasure<typeof MolarConductivity, N>;
export declare const MolarConductivity: GenericMeasure<number, {
    mass: "-1";
    time: "3";
    current: "2";
    substance: "-1";
}>;
/** mol / s */
export declare type CatalyticActivity<N = number> = LiftMeasure<typeof CatalyticActivity, N>;
export declare const CatalyticActivity: GenericMeasure<number, {
    time: "-1";
    substance: "1";
}>;
/** m³ / (s ⋅ mol) */
export declare type CatalyticEfficiency<N = number> = LiftMeasure<typeof CatalyticEfficiency, N>;
export declare const CatalyticEfficiency: GenericMeasure<number, {
    length: "3";
    time: "-1";
    substance: "-1";
}>;
/** mol / (m³ ⋅ s)  */
export declare type ReactionRate<N = number> = LiftMeasure<typeof ReactionRate, N>;
export declare const ReactionRate: GenericMeasure<number, {
    length: "-3";
    time: "-1";
    substance: "1";
}>;
/** m² / s² */
export declare type RadiationDose<N = number> = LiftMeasure<typeof RadiationDose, N>;
export declare const RadiationDose: GenericMeasure<number, {
    length: "2";
    time: "-2";
}>;
/** m² / s³ */
export declare type RadiationDoseRate<N = number> = LiftMeasure<typeof RadiationDoseRate, N>;
export declare const RadiationDoseRate: GenericMeasure<number, {
    length: "2";
    time: "-3";
}>;
/** s² ⋅ A / kg  */
export declare type ElectronMobility<N = number> = LiftMeasure<typeof ElectronMobility, N>;
export declare const ElectronMobility: GenericMeasure<number, {
    mass: "-1";
    time: "2";
    current: "1";
}>;
/** kg ⋅ m² / s */
export declare type AngularMomentum<N = number> = LiftMeasure<typeof AngularMomentum, N>;
export declare const AngularMomentum: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-1";
}>;
/** m² /s */
export declare type SpecificAngularMomentum<N = number> = LiftMeasure<typeof SpecificAngularMomentum, N>;
export declare const SpecificAngularMomentum: GenericMeasure<number, {
    length: "2";
    time: "-1";
}>;
/** cd / m² */
export declare type Luminance<N = number> = LiftMeasure<typeof Luminance, N>;
export declare const Luminance: GenericMeasure<number, {
    length: "-2";
    intensity: "1";
}>;
/** cd ⋅ sr */
export declare type LuminousFlux<N = number> = LiftMeasure<typeof LuminousFlux, N>;
export declare const LuminousFlux: GenericMeasure<number, {
    intensity: "1";
    solidAngle: "1";
}>;
/** cd ⋅ sr / m² */
export declare type Illuminance<N = number> = LiftMeasure<typeof Illuminance, N>;
export declare const Illuminance: GenericMeasure<number, {
    length: "-2";
    intensity: "1";
    solidAngle: "1";
}>;
/** s ⋅ cd ⋅ sr */
export declare type LuminousEnergy<N = number> = LiftMeasure<typeof LuminousEnergy, N>;
export declare const LuminousEnergy: GenericMeasure<number, {
    time: "1";
    intensity: "1";
    solidAngle: "1";
}>;
/** s ⋅ cd ⋅ sr / m² */
export declare type LuminousExposure<N = number> = LiftMeasure<typeof LuminousExposure, N>;
export declare const LuminousExposure: GenericMeasure<number, {
    length: "-2";
    time: "1";
    intensity: "1";
    solidAngle: "1";
}>;
/** s³ ⋅ cd ⋅ sr / (kg ⋅ m²) */
export declare type LuminousEfficiency<N = number> = LiftMeasure<typeof LuminousEfficiency, N>;
export declare const LuminousEfficiency: GenericMeasure<number, {
    length: "-2";
    mass: "-1";
    time: "3";
    intensity: "1";
    solidAngle: "1";
}>;
/** kg ⋅ m² / (s³ ⋅ sr) */
export declare type RadiantIntensity<N = number> = LiftMeasure<typeof RadiantIntensity, N>;
export declare const RadiantIntensity: GenericMeasure<number, {
    length: "2";
    mass: "1";
    time: "-3";
    solidAngle: "-1";
}>;
/** kg ⋅ m / (s³ ⋅ sr)  */
export declare type SpectralIntensity<N = number> = LiftMeasure<typeof SpectralIntensity, N>;
export declare const SpectralIntensity: GenericMeasure<number, {
    length: "1";
    mass: "1";
    time: "-3";
    solidAngle: "-1";
}>;
/** kg / (s³ ⋅ sr) */
export declare type Radiance<N = number> = LiftMeasure<typeof Radiance, N>;
export declare const Radiance: GenericMeasure<number, {
    mass: "1";
    time: "-3";
    solidAngle: "-1";
}>;
/** kg / (m ⋅ s³ ⋅ sr) */
export declare type SpectralRadiance<N = number> = LiftMeasure<typeof SpectralRadiance, N>;
export declare const SpectralRadiance: GenericMeasure<number, {
    length: "-1";
    mass: "1";
    time: "-3";
    solidAngle: "-1";
}>;
/** rad / s */
export declare type AngularVelocity<N = number> = LiftMeasure<typeof AngularVelocity, N>;
export declare const AngularVelocity: GenericMeasure<number, {
    time: "-1";
    planeAngle: "1";
}>;
/** rad / s² */
export declare type AngularAcceleration<N = number> = LiftMeasure<typeof AngularAcceleration, N>;
export declare const AngularAcceleration: GenericMeasure<number, {
    time: "-2";
    planeAngle: "1";
}>;
